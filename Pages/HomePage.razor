@page "/home"
@* @inject TCPService tcpService  *@
@inject NavigationManager nav
@inject MessageDecoder messageDecoder
@inject ProductsDbService ProductsDb

@if (ShowSettingsMessageBox)
{
	<SettingMessageBox buttonClose="ChangeSettingsMBState" />
}

@if (ShowCameraUnavalibleMessageBox)
{
	<CameraConnectingMessageBox buttonClose="ChangeCantConnectToCameraMBState" />
}

@if (ShowDbUsersMessageBox)
{
	<DbUsersPage buttonClose="ChangeDbUsersMBState" openSettings="ChangeSettingsMBState"/>
}

@if (ShowDbProductsMessageBox)
{
	<DbProductsPage buttonClose="ChangeDbProductsMBState" openSettings="ChangeSettingsMBState"/>
}

@if (ShowMainContent)
{
	<div class="PageGrid">

		<div class="CameraStatusItemPlace">
			<div class="objectFullScale">
				@if(IsCameraConnected)
				{
					<div class="oi oi-camera-slr headerIconics defaultBackground defaultContainerShadows" />
				}
				else
				{
					<div class="oi oi-camera-slr headerIconics errorContainerShadows errorBackground" />
				}
			</div>
		</div>


		<div class="appTitlePlace">
			<span class="applicationHeader ">
				Camera Diplomat
			</span>
		</div>

		<div class="settingsIconPlace">
			<div class="objectFullScale">
				<div class="oi oi-cog headerIconics customButton" @onclick="ChangeSettingsMBState" />
			</div>
		</div>



		<div class="mainContentPlace">
			<ProductDetail product="productDataToView" />
		</div>

		<div class="statisticsPlace" style="text-align:center">
			<div class="textDisplay">
				@statistic
			</div>
		</div>

		@* 	<div class="buttonsPlace">
	<button class="btn btn-primary userButtonsStyle">
	one
	</button>

	<button class="btn btn-primary userButtonsStyle">
	two
	</button>


	<button class="btn btn-primary userButtonsStyle">
	three
	</button>



	</div> *@

		<div class="buttonsPlace">
			<div class="subContainer">

			<button class="btn btn-primary adminButtonsStyle" @onclick="TestConnection">
				one
			</button>

			<button class="btn btn-primary adminButtonsStyle" @onclick="ChangeDbUsersMBState">
				БД пользователи
			</button>


			<button class="btn btn-primary adminButtonsStyle" @onclick="ChangeDbProductsMBState" >
				БД продукты
			</button>

			<button class="btn btn-primary adminButtonsStyle" @onclick="ButtonFourClicked">
				four
			</button>
			</div>
		</div>
	</div>

}

@code {
	private string statistic = "продуктов считано 1000, из них брковано 10 (1%)";

	private bool ShowSettingsMessageBox = false;
	private bool ShowCameraUnavalibleMessageBox = false;

	private bool ShowDbUsersMessageBox = false;
	private bool ShowDbProductsMessageBox = false;

	private bool ShowMainContent = true;

	private ProductViewModel productDataToView;
	private bool IsCameraConnected = true;


	private void NewMessageGet(string msg)
	{
		statistic = msg;
		Product newProduct = messageDecoder.MessegeDiplomat(msg);
		if (newProduct != null)
		{

			productDataToView.Text = newProduct.text;
			productDataToView.QRCode = newProduct.code;
			productDataToView.Quality = newProduct.percent.ToString();
			productDataToView.Name = newProduct.productName;
			productDataToView.CodeCorrect = newProduct.quality;

			//ProductsDb.CreateProduct(newProduct);
		}
		InvokeAsync(StateHasChanged);
	}

	private void TestConnection()
	{
		// tcpService.SendMessage("so");
		nav.NavigateTo("/login");
	}


	protected override async void OnInitialized()
	{


		 productDataToView = new ProductViewModel(true, true, true, true,
		"Название продукта", "Процент качества", "QR при наличии", "Текстовые надписи при наличии");


		// tcpService.EventNewMessageGet += NewMessageGet;
		// tcpService.EventCameraUnavalible += ChangeCameraUnavalibleMBState;

		// tcpService.EventCheckCameraStatus();


		// Task.Run(tcpService.GetMessages);

		// // nav.NavigateTo("/login");

	}

	private void ChangeCameraUnavalibleMBState()
	{
		ShowCameraUnavalibleMessageBox = !ShowCameraUnavalibleMessageBox;
	}

	private void ChangeSettingsMBState()
	{
		ShowSettingsMessageBox = !ShowSettingsMessageBox;
	}

	private void ChangeCantConnectToCameraMBState()
	{
		ShowCameraUnavalibleMessageBox = !ShowCameraUnavalibleMessageBox;
	}

	private void ChangeDbUsersMBState()
	{
		ShowDbUsersMessageBox = !ShowDbUsersMessageBox;
		ShowMainContent = !ShowMainContent;
	}


	private void ChangeDbProductsMBState()
	{
		ShowDbProductsMessageBox = !ShowDbProductsMessageBox;
		ShowMainContent = !ShowMainContent;
	}

	private void ButtonFourClicked()
	{
		nav.NavigateTo("/login");
	}











	// Определение делегата
	// public delegate string MessageReceivedDelegate(string message);

	// // Метод, который соответствует сигнатуре делегата
	// public string OnMessageReceived(string message)
	// {
	// 	// Обработка сообщения и возврат текста
	// 	string response = $"Получено сообщение: {message}";
	// 	return response;
		// }

	// // Использование делегата
	// public void UseDelegate()
	// {
	// 	// Создание экземпляра делегата
	// 	MessageReceivedDelegate messageDelegate = OnMessageReceived;

	// 	// Получение сообщения
	// 	string message = "Привет, мир!";

	// 	// Вызов делегата и получение текста
	// 	string response = messageDelegate(message);

	// 	// Вывод ответа
	// 	Console.WriteLine(response);
		// }

}



