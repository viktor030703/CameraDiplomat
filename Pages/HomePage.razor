@page "/"
@inject TCPService tcpService 
@inject MessageDecoder messageDecoder
@inject ProductsDbService ProductsDb
@inject SessionsDbService SessionsDb
@inject StatsService statsService
@inject ConfigurationService configurationService

@if (ShowSettingsMessageBox)
{
	<SettingMessageBox buttonClose="ChangeSettingsMBState"/>
}

@if (ShowCameraUnavalibleMessageBox)
{
	<CameraConnectingMessageBox buttonClose="ChangeCameraLostConnectionMBState" />
}

@if (ShowDbUsersMessageBox)
{
	<DbUsersPage buttonClose="ChangeDbUsersMBState" openSettings="ChangeSettingsMBState" />
}

@if (ShowDbProductsMessageBox)
{
	<DbProductsPage buttonClose="ChangeDbProductsMBState" openSettings="ChangeSettingsMBState" />
}

@if (ShowDbSessionsMessageBox)
{
	<DbSessionsPage buttonClose="ChangeDbSessionsMBState" />
}




@if(ShowMarriagePercentWaringMessageBox)
{
	
	<BigMarriageProcentMessageBox buttonClose="HideBigMarriageProcentMB"/>
}



@if (ShowMarriageCountInRowWaringMessageBox)
{
	<BigMarriageCountInRowMessageBox buttonClose="HideBigMarriageCountInRowMB"/>
}



 
@if (ShowMainContent)
{
	<div class="pageGrid">

		<div class="CameraStatusItemPlace">
			<div class="objectFullScale">
				@if (IsCameraConnected)
				{
					<div class="oi oi-camera-slr headerIconics defaultBackground defaultContainerShadows"/>
				}
				else
				{
					<div class="oi oi-camera-slr headerIconics errorContainerShadows errorBackground" @onclick=ChangeCameraLostConnectionMBState/>
				}
			</div>
		</div>


		<div class="appTitlePlace">
			<span class="applicationHeader ">
				Camera Diplomat
			</span>
		</div>

		<div class="settingsIconPlace">
			<div class="objectFullScale">
				<div class="oi oi-cog headerIconics customButton" @onclick="ChangeSettingsMBState" />
			</div>
		</div>



		<div class="mainContentPlace">
			<ProductDetail product="productDataToView"/>
		</div>

		<div class="statisticsPlace defaultBackground defaultContainerShadows">
			<div class="textDisplay">
				@statistic
			</div>
		</div>

		@* 	<div class="buttonsPlace">
	<button class="btn btn-primary userButtonsStyle">
	one
	</button>

	<button class="btn btn-primary userButtonsStyle">
	two
	</button>


	<button class="btn btn-primary userButtonsStyle">
	three
	</button>



	</div> *@

		<div class="buttonsPlace">
			<div class="subContainer">
				<button class="btn btn-primary adminButtonsStyle customButton" @onclick="TestConnection">
					one
				</button>

				<button class="btn btn-primary adminButtonsStyle customButton" @onclick="ChangeDbUsersMBState">
					БД пользователи
				</button>

				<button class="btn btn-primary adminButtonsStyle customButton" @onclick="ChangeDbProductsMBState">
					БД продукты
				</button>

				<button class="btn btn-primary adminButtonsStyle customButton" @onclick="ChangeDbSessionsMBState">
					БД сессии
				</button>

				<button class="btn btn-primary adminButtonsStyle customButton" @onclick="UpdateStats">
					Обнулить счётчик
				</button>
			</div>
		</div>
	</div>

}

@code {
	private string statistic = "Тут будет отображаться статистика серии";

	private bool ShowSettingsMessageBox = false;
	private bool ShowCameraUnavalibleMessageBox = false;

	private bool ShowDbUsersMessageBox = false;
	private bool ShowDbProductsMessageBox = false;
	private bool ShowDbSessionsMessageBox = false;

	private bool ShowMainContent = true;


	private bool ShowMarriagePercentWaringMessageBox = false;//тестики!!!!
	private bool ShowMarriageCountInRowWaringMessageBox = false;//тестики!!!!


	private ProductViewModel productDataToView;
	private bool IsCameraConnected;

	private void NewMessageHandler(string msg)
	{

		Product newProduct = messageDecoder.MessegeDiplomat(msg, out ProductViewModel viewModel, out int checksCompleted);

		if (newProduct != null & viewModel != null)
		{
			productDataToView = viewModel;
			statsService.NewProductChecked(checksCompleted);
			statistic = statsService.GetStatsString();
			//ProductsDb.CreateProductAsync(newProduct);// 
		}
		InvokeAsync(StateHasChanged);
	}

	private void TestConnection()
	{
		// tcpService.SendMessage("so");
	}


	protected override void OnInitialized()
	{
		productDataToView = new ProductViewModel(true, true, true, true,
		"Название продукта", "Процент качества", "QR при наличии", "Текстовые надписи при наличии");


		tcpService.EventNewMessageGet += NewMessageHandler;
		tcpService.EventCameraUnavalible += ShowCameraUnavalibleMBState;
		tcpService.EventCameraConnectedSuccessfully +=HideCameraUnavalibleMBState;

		statsService.EventNewSessionWasLoaded += ShowUploadedSession;

		//tcpService.CheckConnectionNotNull();//if null event will invoke

		Task.Run(tcpService.GetMessages); // read messages
		statsService.ResetStats();//обновили счетчик статистики
										// tcpService.StartTimer();
		IsCameraConnected = configurationService.IsCameraConnected;
		InvokeAsync(StateHasChanged);


		//Делегаты подписаться и установить переменные
		//statsService.EventBigMarriageCount += 


		statsService.StartAutoUploadActiveSessionInDb();
	}

	private void ShowCameraUnavalibleMBState()
	{
		ShowCameraUnavalibleMessageBox = true;
		IsCameraConnected = configurationService.IsCameraConnected;
		InvokeAsync(StateHasChanged);
	}
	private void HideCameraUnavalibleMBState()
	{
		ShowCameraUnavalibleMessageBox = false;
		IsCameraConnected = configurationService.IsCameraConnected;
		InvokeAsync(StateHasChanged);
	}
	private void ChangeCameraLostConnectionMBState()
	{
		ShowCameraUnavalibleMessageBox = !ShowCameraUnavalibleMessageBox;
	}
	private void ChangeSettingsMBState()
	{
		ShowSettingsMessageBox = !ShowSettingsMessageBox;
	}



	private void ChangeDbUsersMBState()
	{
		ShowDbUsersMessageBox = !ShowDbUsersMessageBox;
		ShowMainContent = !ShowMainContent;
	}
	private void ChangeDbSessionsMBState()
	{
		ShowDbSessionsMessageBox = !ShowDbSessionsMessageBox;
		ShowMainContent = !ShowMainContent;
	}
	private void ChangeDbProductsMBState()
	{
		ShowDbProductsMessageBox = !ShowDbProductsMessageBox;
		ShowMainContent = !ShowMainContent;
	}
	private void ChangeRefreshCameraStatusMBState()
	{
		IsCameraConnected = tcpService.BooleanCheckCameraStatus();
		if(IsCameraConnected)
		{
			ShowCameraUnavalibleMessageBox = false;
			InvokeAsync(StateHasChanged);
		}
		else
		{
			ShowCameraUnavalibleMessageBox = true;
			InvokeAsync(StateHasChanged);
		}
	}


	public void ShowBigMarriageProcentMB()
	{
		ShowMarriagePercentWaringMessageBox = true;
	}

	public void HideBigMarriageProcentMB()
	{
		ShowMarriagePercentWaringMessageBox = true;
	}

	public void ShowBigMarriageCountInRowMB()
	{
		ShowMarriageCountInRowWaringMessageBox = true;
	}

	public void HideBigMarriageCountInRowMB()
	{
		ShowMarriageCountInRowWaringMessageBox = false;
	}

	private async void UpdateStats()
	{
		await statsService.AutoUpdateOrCreateSession();
		statsService.ResetStats();
		statistic = statsService.GetStatsString();
		await InvokeAsync(StateHasChanged);
	}

	private async void ShowUploadedSession()
	{
		await statsService.AutoUpdateOrCreateSession();
		statistic = statsService.GetStatsString();
		await InvokeAsync(StateHasChanged);
	}
}



