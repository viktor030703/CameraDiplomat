@inject IUsersDbService userService
@inject ConfigurationService configurationService

@if (showAddUserMBState)
{
	<AddUserMessageBox buttonClose="ChangeAddUserMBState" />
}

@if (showChangeUserMBState)
{
	<EditUserMessageBox buttonClose="ChangeEditUserMBState" userToEdit="selectedUser" />
}

@if (showDeleteUserMBState)
{
	<DeleteUserMessageBox buttonClose="ChangeDeleteUserMBState" userToDelete="selectedUser" buttonDelete="ClearSelectedUser"/>
}

@if (showUserInformationMBState)
{
	<UserInfoMessageBox buttonClose="ChangeGetUserInfoMBState" userToGetInfo="selectedUser" />
}

@if (showSelectSomebodyMBState)
{
	<SelectSomebodyMessageBox buttonClose="ChangeSelectSomebodyMBState" />
}

<div class="PageGrid">

	<div class="navigationItemPlace">
		<div class="objectFullScale customButton">
			<div class="oi oi-chevron-left headerIconics" @onclick="()=>buttonClose.InvokeAsync()" />
		</div>
	</div>

	<div class="appTitlePlace">
		<span class="applicationHeader">
			Camera Diplomat
		</span>
	</div>

	<div class="settingsIconPlace">
		<div class="objectFullScale customButton">
			<div class="oi oi-cog headerIconics" @onclick="()=>openSettings.InvokeAsync()" />
		</div>
	</div>

	<div class="dbGridPlace">
		<DbUsersTable usersFromDb="usersFromDb" selectedUser="SmtWichSelectedUser"/>
	</div>

	<div class="buttonsPlace">
		<div class="buttonsContainer">
			@if (String.Equals(configurationService.activeUser.role, "admin") || String.Equals(configurationService.activeUser.role, "student"))
			{
				<button class="btn customButton" @onclick="()=>ChangeAddUserMBState()">Добавить</button>
				<button class="btn customButton" @onclick="()=>ChangeEditUserMBState()">Изменить</button>
				<button class="btn customButton errorBackground" @onclick="()=>ChangeDeleteUserMBState()">Удалить</button>
				<button class="btn customButton" @onclick="()=>ChangeGetUserInfoMBState()">Подробнее</button>
			}
		</div>
	</div>
</div>

@code {
	[Parameter] public EventCallback buttonClose { get; set; }
	[Parameter] public EventCallback openSettings { get; set; }
	private List<User> usersFromDb;

	User selectedUser = null;

	private bool showAddUserMBState = false;
	private bool showChangeUserMBState = false;
	private bool showDeleteUserMBState = false;
	private bool showUserInformationMBState = false;

	private bool showSelectSomebodyMBState = false;

	protected override void OnInitialized()
	{
		usersFromDb = userService.GetUsers();
		InvokeAsync(StateHasChanged);
	}

	private void SmtWichSelectedUser(User userFromTable)
	{
		selectedUser = userFromTable;
	}

	private void ChangeAddUserMBState()
	{
		if (!showAddUserMBState)
		{
			showAddUserMBState = true;
		}
		else
		{
			showAddUserMBState = false;
			RefreshUsersFromDb();
		}
	}

	private void ChangeEditUserMBState()
	{
		if (!showChangeUserMBState)
		{
			if (selectedUser == null)
			{
				ChangeSelectSomebodyMBState();
			}
			else
			{
				showChangeUserMBState = !showChangeUserMBState;
			}
		}
		else
		{
			showChangeUserMBState = !showChangeUserMBState;
			RefreshUsersFromDb();
		}
	}

	private void ChangeDeleteUserMBState()
	{
		if (!showDeleteUserMBState)
		{
			if (selectedUser == null)
			{
				ChangeSelectSomebodyMBState();
			}
			else
			{
				showDeleteUserMBState = !showDeleteUserMBState;
			}
		}
		else
		{
			showDeleteUserMBState = !showDeleteUserMBState;
			RefreshUsersFromDb();
		}
	}

	private void ChangeGetUserInfoMBState()
	{
		if (!showUserInformationMBState)
		{
			if (selectedUser == null)
			{
				ChangeSelectSomebodyMBState();
			}
			else
			{
				showUserInformationMBState = !showUserInformationMBState;
			}
		}
		else
		{
			showUserInformationMBState = !showUserInformationMBState;
			RefreshUsersFromDb();
		}
	}

	private void ClearSelectedUser()
	{
		selectedUser = null;
	}

	private void ChangeSelectSomebodyMBState()
	{
		showSelectSomebodyMBState = !showSelectSomebodyMBState;
	}

	private void RefreshUsersFromDb()
	{
		usersFromDb = userService.GetUsers();
		InvokeAsync(StateHasChanged);
	}
}
