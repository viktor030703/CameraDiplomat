@page "/"
@inject IUsersDbService userService
@inject NavigationManager navigationManager

@inject IDbMainController dbMainController
@inject ConfigurationService configurationService

@inject ILoggerService CallUpLogsDesigner

@if (IsLoginFail)
{
	<LoginErrorMessageBox buttonClose="ChangeLoginErrorMBState" />
}

@if (ShowInfoMessageBox)
{
	<InfoMessageBox buttonClose="ChangeShowInfoMBState" />
}

@if (ShowSettingsMessageBox)
{
	<SettingMessageBox buttonClose="ChangeSettingsMBState" />
}

@if (IsLoginSuccess)
{
	<LoginSuccessMessage />
}

<div class="PageGrid">
	<div class="navigationItemPlace">
		<div class="objectFullScale">
			<div class="oi oi-info headerIconics customButton" @onclick="ChangeShowInfoMBState"/>
		</div>
	</div>

	<div class="appTitlePlace">
		<span class="applicationHeader">
			Camera Diplomat
		</span>
	</div>

	<div class="settingsIconPlace addOpacity">
		<div class="objectFullScale">
			<div class="oi oi-lock-locked headerIconics defaultBackground addBorder" />
		</div>
	</div>

	<div class="userIconPlace">
		<center>
			<div class="oi oi-person userIcon defaultBackground" />
		</center>
	</div>

	<div class="loginTextPlace textContent defaultBackground objectPartScale translateObjectBottom noEdges">
		Логин:
	</div>

	<div class="loginInputPlace textContent">
		<input type="text" class="objectPartScale inputBlockStyle" @bind="login" />
	</div>


	<div class="passwordTextPlace textContent defaultBackground objectPartScale translateObjectBottom noEdges">
		Пароль:
	</div>

	<div class="passwordInputPlace textContent">
		<input type="password" class="objectPartScale inputBlockStyle" @bind="password" />
	</div>

	<div class="buttonLoginPlace">
		<div class="textContent customButton" @onclick="buttonLoginClick">
			Войти
		</div>
	</div>
</div>


@code {

	private string login;
	private string password;
	private bool IsLoginFail = false;

	private bool ShowSettingsMessageBox = false;
	private bool ShowInfoMessageBox = false;
	private bool IsLoginSuccess = false;

	protected override async void OnInitialized()
	{
		if (configurationService.IsDbFatalError)
		{
			dbMainController.DeleteDb();
			dbMainController.CreateDb();
			navigationManager.NavigateTo("/home");
		}

		List<User> usersFromDb = userService.GetUsers();
		if (usersFromDb.Count == 0)
		{
			IsLoginSuccess = true;
			navigationManager.NavigateTo("/home");
		}
	}

	private void buttonLoginClick()
	{
		bool autintificateStatus = userService.Authentificate(login, password);
		if (autintificateStatus)
		{
			IsLoginSuccess = true;
			navigationManager.NavigateTo("/home");
		}
		else
		{
			IsLoginFail = true;
		}
	}

	private void ChangeLoginErrorMBState()
	{
		IsLoginFail = false;
	}


	private void ChangeSettingsMBState()
	{
		ShowSettingsMessageBox = !ShowSettingsMessageBox;
	}

	private void ChangeShowInfoMBState()
	{
		ShowInfoMessageBox = !ShowInfoMessageBox;
	}
}















