<div class="flexTable">

	<div class="item">
		<div class="searchItem">
			<input type="text" class="objectFullScale" @bind="substringToSerch" />
		</div>

		<div class="cell">
			<button class="btn btn-primary fullScale customButton defaultBackground" @onclick="LaunchNewFilter">
				<div class="oi oi-magnifying-glass" />
			</button>
		</div>
	</div>

	<div class="item">
		<div class="addWideBorderToCell bigCell"> Добавил </div>
		<div class="addWideBorderToCell cell"> Всего </div>
		<div class="addWideBorderToCell cell"> Брак </div>
		<div class="addWideBorderToCell cell"> Процент </div>
		<div class="addWideBorderToCell bigCell"> Начал/завершил </div>
	</div>

	@if(sessionsAfterFilter.Count() != 0)
	{
	@foreach (Session session in sessionsAfterFilter)
	{
		@if (session == sessionToAddBackgroung)
		{
			<div class="item addBackgroungToElement" @onclick="()=>newSelectedSession.InvokeAsync(session)">
				<div class="addNarrowBorderToCell bigCell"> @session.creatorsLogin</div>
				<div class="addNarrowBorderToCell cell"> @session.TotalCount </div>
				<div class="addNarrowBorderToCell cell"> @session.MarriageCount </div>
				<div class="addNarrowBorderToCell cell"> @session.MarriagePercent </div>
				<div class="addNarrowBorderToCell bigCell"> @session.Data </div>
			</div>
		}
		else
		{
			<div class="itemToSelect" @onclick="()=>UserSelectSmt(session)">
				<div class="addNarrowBorderToCell bigCell"> @session.creatorsLogin </div>
				<div class="addNarrowBorderToCell cell"> @session.TotalCount </div>
				<div class="addNarrowBorderToCell cell"> @session.MarriageCount </div>
				<div class="addNarrowBorderToCell cell"> @session.MarriagePercent </div>
				<div class="addNarrowBorderToCell bigCell"> @session.Data </div>
			</div>
		}
		}
	}
	else
	{
		<h1 class="textHeader addBottomBorder"> Ничего не найдено</h1>
	}
</div>

@code {
	[Parameter] public List<Session> sessionsFromDb { get; set; }
	[Parameter] public EventCallback<Session> newSelectedSession { get; set; }

	private string substringToSerch;
	private Session sessionToAddBackgroung { get; set; }
	private List<Session> sessionsAfterFilter { get; set; }

	protected override void OnParametersSet()
	{
		LaunchNewFilter();
		StateHasChanged();
	}

	private async Task UserSelectSmt(Session session)
	{
		sessionToAddBackgroung = session;
		await ReturnSelectedUser(session);
		StateHasChanged();
	}

	private async Task ReturnSelectedUser(Session session)
	{
		await newSelectedSession.InvokeAsync(session);
	}

	private void LaunchNewFilter()
	{
		if (!string.IsNullOrEmpty(substringToSerch))
		{
			sessionsAfterFilter = sessionsFromDb.Where(h => h.creatorsLogin.Contains(substringToSerch) || h.Data.Contains(substringToSerch)
			|| h.MarriageCount.ToString().Contains(substringToSerch) || h.MarriagePercent.Contains(substringToSerch) ||
			h.TotalCount.ToString().Contains(substringToSerch)).ToList();
		}
		else
		{
			sessionsAfterFilter = sessionsFromDb;
		}
		InvokeAsync(StateHasChanged);
	}
}
