@inject ITCPService tcpService
@inject ConfigurationService configurationService

<div class="messageBoxBackground" @onclick="buttonClose" />

<div class="messageBox">
	<div class="container">

		<div class="objectTwoHeight defaultBackground defaultContainerShadows addBorder">

			<div class="textContent objectHeight addBottomBorder ">
				Получено от камеры:
			</div>

			<div class="textContent objectHeight textScroll">
				@messageFromCamera
			</div>
		</div>

		<div class="objectThreeHeight defaultBackground defaultContainerShadows addBorder">
			<div class="textContent objectHeight addBottomBorder">
				Команда:
			</div>
			<div class="textContent objectHeight">
				<input type="text" class="fullScale" placeholder="Что отправить?" @bind=messageToCamera />
			</div>

			<div class="textContent  objectHeight textScroll">
				@messageToUser:
			</div>
		</div>

		<div class="subContainer objectHeight buttonUp">
			<button class="btn fullScale customButton" @onclick="()=>SendMessage(messageToCamera)">
				Отправить
			</button>

			<button class="btn fullScale customButton" @onclick="()=>buttonClose.InvokeAsync()">
				Закрыть
			</button>

			@if (HideCodes)
			{
				<button class="btn fullScale customButton" @onclick="ChangeHideCodesState">
					Все ответы
				</button>
			}
			else
			{
				<button class="btn fullScale customButton" @onclick="ChangeHideCodesState">
					Скрыть коды
				</button>
			}
		</div>
	</div>
</div>

@code {
	[Parameter] public EventCallback buttonClose { get; set; }
	[Parameter] public string MessageFromCamera { get; set; }

	private bool HideCodes = false;

	private string messageToUser;
	private string messageFromCamera;
	private string messageToCamera;

	protected override void OnInitialized()
	{
		tcpService.EventNewMessageGet += ShowNewMessage;
		if (!string.IsNullOrEmpty(MessageFromCamera))
			messageFromCamera = MessageFromCamera;
		else
			messageFromCamera = "Тут будет сообщение с камеры";
		messageToUser = "Введите команду камере";
	}

	private async Task SendMessage(string message)
	{
		if (await tcpService.SendMessage(message))
		{
			messageToUser = DateTime.Now.ToString() + " успешно отправлено";
		}
		else
		{
			messageToUser = DateTime.Now.ToString() + " не удалось доставить";
		}
	}

	private void ShowNewMessage(string messageFromService)
	{
		if (HideCodes)
		{
			if (messageFromService.Split('<', '>').Count() != configurationService.PartsCodeIncludeAfterSplit)
			{
				messageFromCamera = messageFromService;
			}
		}
		else
		{
			messageFromCamera = messageFromService;
		}

		if (messageFromService == configurationService.CameraConnectedMessage)
		{
			configurationService.CameraNeedAutohorise = false;
		}
	}

	private void ChangeHideCodesState()
	{
		HideCodes = !HideCodes;
		messageFromCamera = string.Empty;
		ShowNewMessage(messageFromCamera);
	}

}
