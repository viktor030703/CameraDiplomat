@inject ConfigurationService configurationService

<div class="MessageBoxBackground" @onclick="()=>buttonClose.InvokeAsync()" />

<div class="MessageBox">
	<div class="container">
		<div class="headerPlace textHeader">
			Настройки
		</div>

		@if (SelectColor)
		{
			<ColorSelector ColorIsSelected="ChangeColorSelectorState" />
		}
		else if (ChangeCameraIPandPort)
		{
			<CameraConnectingMessageBox buttonClose="ChangeCameraConnectionMBState"/>
		}
		else
		{



			<button class="buttonPlace btn btn-primary" @onclick="ChangeCameraConnectionMBState">
				Изменить параметры камеры
			</button>

			<button class="buttonPlace btn btn-primary" @onclick="ChangeColorSelectorState">
				Настроить цвет панелей
			</button>

			<button class="buttonPlace btn btn-primary" @onclick="ChangeColorSelectorState">
				Настроить цвет кнопок
			</button>

			<button class="buttonPlace btn btn-primary" @onclick="()=>buttonClose.InvokeAsync()">
				Сменить аккаунт
			</button>

			<button class="buttonPlace btn btn-primary" @onclick="()=>buttonClose.InvokeAsync()">
				Закрыть
			</button>
		}
	</div>
</div>

@code {
	[Parameter] public EventCallback buttonClose { get; set; }

	private bool AdminSettings;

	private bool SelectColor = false;
	private bool ChangeCameraIPandPort = false;

	protected override void OnInitialized()
	{
		if (configurationService.ActiveUserRole == "admin")
		{
			AdminSettings = true;
		}
	}


	private void ChangeColorSelectorState()
	{
		SelectColor = !SelectColor;
	}


	private void ChangeCameraConnectionMBState()
	{
		ChangeCameraIPandPort = !ChangeCameraIPandPort;
	}
}
