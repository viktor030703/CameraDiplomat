@inject IStatisticService statsService
@inject IDbMainController dbMainController
@inject ITCPService tcpService
@inject ConfigurationService configurationService
@inject NavigationManager navigationManager
@inject ILoggerService loggerService;

<div class="messageBoxBackground objectFullScale" @onclick="()=>buttonCloseHandler()" />

<div class="messageBox">
	<div class="container fullScale">

		@if (configurationService.IsSettingFromJSON)
		{
			<div class="headerPlace textHeader defaultBackground defaultContainerShadows titleHeight">
				Настройки (конфигурация)
			</div>
		}
		else
		{
			<div class="headerPlace textHeader defaultBackground defaultContainerShadows titleHeight">
				Настройки (стандартные)
			</div>
		}



		<div class="textContent">
			<div class="subContainer">
				<div class="textContent">
					Искать надпись:
				</div>
				<div class="textContent">
					<input type="text" class="fullScale" @bind=patternToSearch />
				</div>

				<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadNewTextPattern()">
					Применить
				</button>
			</div>

			<div class="subContainer">
				<div class="textContent">
					Длинна кода:
				</div>
				<div class="textContent">
					<input type="number" class="fullScale" @bind=patternCodeLength />
				</div>

				<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadNewCodePatternLength()">
					Применить
				</button>
			</div>

			@if (String.Equals(configurationService.activeUser.role, "admin") || String.Equals(configurationService.activeUser.role, "student") ||
					String.Equals(configurationService.activeUser.role, "master"))
			{
				<div class="subContainer">
					<div class="textContent">
						Таймер БД (мс):
					</div>
					<div class="textContent">
						<input type="number" class="fullScale" @bind=bdTimerInterval />
					</div>

					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadDbTimerInterval()">
						Применить
					</button>
				</div>

				<div class="subContainer">
					<div class="textContent">
						Пройти проверок:
					</div>
					<div class="textContent">
						<input type="number" class="fullScale" @bind=checksCount />
					</div>

					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadChecksCount()">
						Применить
					</button>
				</div>

				<div class="subContainer">
					<div class="textContent">
						Таймер логов (мс):
					</div>
					<div class="textContent">
						<input type="number" class="fullScale" @bind=logsTimerInterval />
					</div>

					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadTCPTimerInterval()">
						Применить
					</button>
				</div>

				<div class="subContainer">
					<div class="textContent">
						TCP таймаут:
					</div>
					<div class="textContent">
						<input type="number" class="fullScale" @bind=tcpTimeout />
					</div>

					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadTCPTimeout()">
						Применить
					</button>
				</div>

				<div class="subContainer">
					<div class="textContent">
						Мин. выборка для %:
					</div>
					<div class="textContent">
						<input type="number" class="fullScale" @bind=minMathSet />
					</div>

					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>UploadMinMathSet()">
						Применить
					</button>
				</div>
			}
			<div class="subContainer">
				<div class="textContent">
					Макс. % брака:
				</div>
				<div class="textContent">
					<input type="number" class="fullScale" @bind=maxMarriageProcent />
				</div>

				@if (monitorMarriageProcent)
				{
					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>ChangeMonitorMarriageProcentState()">
						Отключить
					</button>
				}
				else
				{
					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>ChangeMonitorMarriageProcentState()">
						Включить
					</button>
				}

			</div>

			<div class="subContainer">
				<div class="textContent">
					Макс. брака подряд:
				</div>
				<div class="textContent">
					<input type="number" class="fullScale" @bind=maxMarriageInRowCount />
				</div>

				@if (monitorMarriageInRowCount)
				{
					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>ChangeMonitorMarriageCountInRowState()">
						Отключить
					</button>
				}
				else
				{
					<button class="buttonPlace btn customButton uploadButtonStyle styleForTextCentrise" @onclick="()=>ChangeMonitorMarriageCountInRowState()">
						Включить
					</button>
				}

			</div>

			<div class="subContainer">
				<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise" @onclick="logOut">
					Сменить аккаунт
				</button>
			</div>

			@if (String.Equals(configurationService.activeUser.role, "admin"))
			{
				<div class="subContainer">
					<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise" @onclick="()=>RebuildDb()">
						Очистить базу данных
					</button>
				</div>

				<div class="subContainer">
					<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise" @onclick="()=>ShowSpecialCameraSettings()">
						Спец настройки камеры
					</button>
				</div>
			}

			<div class="subContainer">
				<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise" @onclick="()=>CloseTCPConnection()">
					Отключиться от камеры
				</button>
			</div>

			@if (SoundsOn)
			{
				<div class="subContainer">
					<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise successBackground" @onclick="()=>ChangeSoundsOnState()">
						Выключить звуки
					</button>
				</div>
			}
			else
			{
				<div class="subContainer">
					<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise errorBackground" @onclick="()=>ChangeSoundsOnState()">
						Включить звуки
					</button>
				</div>
			}


			<div class="subContainer">
				<button class="buttonPlace btn customButton otherButtonsStyle styleForTextCentrise" @onclick="()=>buttonCloseHandler()">
					Закрыть
				</button>
			</div>
		</div>
	</div>
</div>


@code {
	[Parameter] public EventCallback buttonClose { get; set; }
	[Parameter] public EventCallback showCameraConnectingMBEvent { get; set; }
	[Parameter] public EventCallback showSpecialCameraSettingsEvent { get; set; }
	[Parameter] public EventCallback userLogoutEvent { get; set; }

	private bool monitorMarriageProcent;
	private bool monitorMarriageInRowCount;

	private string patternToSearch;
	private int patternCodeLength;

	private float maxMarriageProcent;
	private int minMathSet;
	private int maxMarriageInRowCount;
	private int checksCount;

	private int bdTimerInterval;
	private int logsTimerInterval;

	private int tcpTimeout;

	private bool SoundsOn;

	protected override void OnInitialized()
	{
		patternCodeLength = configurationService.CodeLength;
		patternToSearch = configurationService.TextPattern;

		bdTimerInterval = configurationService.DbTimerInterval;

		tcpTimeout = configurationService.TcpTimeout;
		logsTimerInterval = configurationService.LogsTimerInterval;

		maxMarriageInRowCount = configurationService.MarriageMaxCountInRow;
		maxMarriageProcent = configurationService.MarriageMaxPercent;
		minMathSet = configurationService.MinMathSet;
		checksCount = configurationService.TotalChecksCount;

		monitorMarriageProcent = configurationService.MonitorMarriagePercent;
		monitorMarriageInRowCount = configurationService.MonitorMarriageCountInRow;

		SoundsOn = configurationService.SoundsOn;
	}

	private void ShowCameraConnectionMB()
	{
		showCameraConnectingMBEvent.InvokeAsync();
		buttonClose.InvokeAsync();
	}

	private void ChangeMonitorMarriageProcentState()
	{
		monitorMarriageProcent = !monitorMarriageProcent;
		configurationService.MonitorMarriagePercent = monitorMarriageProcent;
		if (monitorMarriageProcent)
		{
			UploadMarriageProcent();
		}
	}

	private void ChangeMonitorMarriageCountInRowState()
	{
		monitorMarriageInRowCount = !monitorMarriageInRowCount;
		configurationService.MonitorMarriageCountInRow = monitorMarriageInRowCount;
		if (monitorMarriageInRowCount)
		{
			UploadMarriageCountInRow();
		}
	}

	private void UploadMarriageProcent()
	{
		configurationService.MarriageMaxPercent = maxMarriageProcent;
	}

	private void UploadTCPTimeout()
	{
		configurationService.TcpTimeout = tcpTimeout;
	}

	private void UploadChecksCount()
	{
		configurationService.TotalChecksCount = checksCount;
	}


	private void UploadMarriageCountInRow()
	{
		configurationService.MarriageMaxCountInRow = maxMarriageInRowCount;
	}

	private void UploadMinMathSet()
	{
		configurationService.MinMathSet = minMathSet;
	}

	private void UploadNewTextPattern()
	{
		configurationService.TextPattern = patternToSearch;
	}

	private void UploadNewCodePatternLength()
	{
		configurationService.CodeLength = patternCodeLength;
	}

	private void UploadDbTimerInterval()
	{
		configurationService.DbTimerInterval = patternCodeLength;
		statsService.TimerIntervalUpdate();
	}


	private void UploadTCPTimerInterval()
	{
		configurationService.LogsTimerInterval = logsTimerInterval;
	}


	private void CloseTCPConnection()
	{
		tcpService.CameraDisconnectHandler();
		buttonClose.InvokeAsync();
	}

	private async Task logOut()
	{
		await statsService.AutoUpdateOrCreateSession();
		configurationService.CreateEmptyUser();
		statsService.ResetStats();
		navigationManager.NavigateTo("/");
		loggerService.UpdateSaveLogs();

		CloseTCPConnection();
		await userLogoutEvent.InvokeAsync();
		buttonCloseHandler();
	}

	private void RebuildDb()
	{
		dbMainController.DeleteDb();
		dbMainController.CreateDb();
	}

	private void ChangeSoundsOnState()
	{
		SoundsOn = !SoundsOn;
		configurationService.SoundsOn = SoundsOn;
	}

	private void ShowSpecialCameraSettings()
	{
		buttonCloseHandler();
		showSpecialCameraSettingsEvent.InvokeAsync();
	}

	private async Task buttonCloseHandler()
	{
		buttonClose.InvokeAsync();
		configurationService.SaveCofigurationInJSONAsync();
	}
}
