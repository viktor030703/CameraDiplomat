<div class="flexTable">
	<div class="item">
		<div class="searchItem objectFullScale">
			<input type="text" class="objectFullScale" @bind="substringToSerch" />
		</div>

		<div class="cell">
			<button class="btn btn-primary fullScale customButton defaultBackground" @onclick="LaunchNewFilter">
					<div class="oi oi-magnifying-glass" />
			</button>
		</div>
	</div>

	<div class="item">
		<div class="addWideBorderToCell cell"> Название </div>
		<div class="addWideBorderToCell cell"> Качество </div>
		<div class="addWideBorderToCell cell"> Процент </div>
		<div class="addWideBorderToCell cell"> Код </div>
		<div class="addWideBorderToCell cell"> Надпись </div>
		<div class="addWideBorderToCell cell"> Дата </div>
	</div>
	@if(productsAfterFilter.Count() != 0)
	{
	@foreach (Product product in productsAfterFilter)
	{
		@if (product == userToAddBackgroung)
		{
			<div class="item addBackgroungToElement" @onclick="()=>selectedProduct.InvokeAsync(product)">
				<div class="addNarrowBorderToCell cell"> @product.productName </div>
				<div class="addNarrowBorderToCell cell"> @product.quality </div>
				<div class="addNarrowBorderToCell cell"> @product.percent </div>
				<div class="addNarrowBorderToCell cell"> @product.code </div>
				<div class="addNarrowBorderToCell cell"> @product.text </div>
				<div class="addNarrowBorderToCell cell"> @product.data </div>
			</div>
		}
		else
		{
			<div class="itemToSelect" @onclick="()=>UserSelectSmb(product)">
				<div class="addNarrowBorderToCell cell"> @product.productName </div>
				<div class="addNarrowBorderToCell cell"> @product.quality </div>
				<div class="addNarrowBorderToCell cell"> @product.percent </div>
				<div class="addNarrowBorderToCell cell"> @product.code </div>
				<div class="addNarrowBorderToCell cell"> @product.text </div>
				<div class="addNarrowBorderToCell cell"> @product.data </div>
			</div>
		}
	}
	}
	else
	{
		<h1 class="textHeader addBottomBorder"> Ничего не найдено</h1>
	}
</div>


@code {
	[Parameter] public List<Product> productsFromDb { get; set; }

	[Parameter] public EventCallback<Product> selectedProduct{ get; set; }

	private Product userToAddBackgroung { get; set; }

	private string substringToSerch;
	private List<Product>? productsAfterFilter { get; set; }

	protected override void OnParametersSet()
	{
		LaunchNewFilter();
		StateHasChanged();
	}

	private async Task UserSelectSmb(Product productUserClicked)
	{
		userToAddBackgroung = productUserClicked;
		await ReturnSelectedProduct(productUserClicked);
		StateHasChanged();
	}

	private async Task ReturnSelectedProduct(Product product)
	{
		await selectedProduct.InvokeAsync(product);
	}

	private void LaunchNewFilter()
	{
		if(!string.IsNullOrEmpty(substringToSerch))
		{
			productsAfterFilter = productsFromDb.Where(h => h.text.Contains(substringToSerch) || h.productName.Contains(substringToSerch)
			|| h.code.Contains(substringToSerch) || h.data.Contains(substringToSerch) || h.quality.ToString().Contains(substringToSerch) 
			|| h.percent.ToString().Contains(substringToSerch) || h.loginUserWichLeaveProduct.Contains(substringToSerch)).ToList();
		}
		else
		{
			productsAfterFilter = productsFromDb;
		}
		InvokeAsync(StateHasChanged);
	}
}
