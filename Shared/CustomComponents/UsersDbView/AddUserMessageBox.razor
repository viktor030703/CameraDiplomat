@inject IUsersDbService dbService

<div class="messageBoxBackground" @onclick="buttonClose" />

<div class="messageBox successContainerShadows">
	<div class="container">
		<div class="headerPlace textHeader addBottomBorder successTextShadows limitConteinerHeight">
			Добавление пользователя
		</div>

		@if (thereIsError)
		{
			<div class="textPlace textContent errorTextShadows">
				@message
			</div>
		}
		else
		{
			<div class="textPlace textContent textSuccessContent">
				@message
			</div>
		}
		
		<div class="textPlace textContent">
			<div class="subContainer">
				<div class="textContent textSuccessContent">
					Имя:
				</div>
				<div class="textContent textSuccessContent">
					<input type="text" class="fullScale" @bind=userLogin />
				</div>
			</div>
		</div>

		<div class="textPlace textContent">
			<div class="subContainer">
				<div class="textContent textSuccessContent">
					Пароль:
				</div>
				<div class="textContent textSuccessContent">
					<input type="text" class="fullScale" @bind=userPassword />
				</div>
			</div>
		</div>

		<div class="textPlace textContent">
			<div class="subContainer">
				<div class="textContent textSuccessContent">
					Роль
				</div>
				<div class="textContent textSuccessContent">
					<select class="form-select" aria-label="default exapmple" style="text-align:center" @bind="userRole">
						<option selected>Выбрать роль</option>
						<option value="admin">Администратор</option>
						<option value="master">Мастер</option>
						<option value="user">Рабочий</option>
						<option value="student">Студент</option>
					</select>
				</div>
			</div>
		</div>

		<div class="subContainer buttonUp">
			<button class="btn btn-danger fullScale" @onclick="createUser">
				Создать
			</button>
			<button class="btn btn-primary fullScale" @onclick="()=>buttonClose.InvokeAsync()">
				Закрыть
			</button>
		</div>

	</div>
</div>

@code {
	[Parameter] public EventCallback buttonClose { get; set; }

	private string userLogin { get; set; }
	private string userPassword { get; set; }
	private string userRole { get; set; }
	private string userLoginData { get; set; }

	private string message = "Введите данные нового пользователя";
	private bool thereIsError = false;

	private async Task createUser()
	{
		if (!String.IsNullOrEmpty(userLogin) & !String.IsNullOrEmpty(userPassword) & !String.IsNullOrEmpty(userRole))
		{
			try
			{
				User newUser = new User
					{
						id = Guid.NewGuid().ToString(),
						login = userLogin,
						password = userPassword,
						role = userRole,
						lastLoginData = "-"
					};
				thereIsError = await dbService.CreateUserAsync(newUser);
				if(thereIsError)
				{
					thereIsError = false;
					await buttonClose.InvokeAsync();
				}
				else
				{
					message = "Нкобходим пароль";
				}
			}
			catch (Exception ex)
			{
				thereIsError = true;
				message = ex.Message.ToString();
			}
		}
		else
		{
			thereIsError = true;
			message = "Введены некорректные данные";
		}
	}
}